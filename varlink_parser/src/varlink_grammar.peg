whitespace /* Modeled after ECMA-262, 5th ed., 7.2. */
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eol_r /* Modeled after ECMA-262, 5th ed., 7.3. */
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"

comment
    = "#" [^\n\r\u{2028}\u{2029}]* eol_r

eol
    = whitespace* eol_r
    / comment

_
    = whitespace / comment / eol_r

field_name
    = [a-z_][A-Za-z0-9_]*

name
	= [A-Z][A-Za-z0-9_]*

interface_name /* no hyphen at begin and end */
	= [a-z]+ ( '.' [a-z0-9]+ ([-] [a-z0-9]+)* )+
	  / "xn--" [a-z0-9]+ ( '.' [a-z0-9]+ ([-] [a-z0-9]+)* )+

array
    = "[]"
    / '[' [0-9]+ ']'

type
    = "bool"    array? _* "=" _* ("true" / "false")
    / "bool"    array?
    / "int"     array? _* "=" _* [\+\-0-9]+
    / "int"     array?
    / "float"   array? _* "=" _* [\+\-0-9.,eE]+
    / "float"   array?
    / "string"  array? _* "=" _* '"' ( '\\' '"' / '\\' / [^"\\] )+ '"'
    / "string"  array?
    / "data"    array? _* "=" _* '"' ( '\\' '"' / '\\' / [^"\\] )+ '"'
    / "data"    array?
    / name      array?
    / v:vstruct array?

argument
    = _* field_name _* ':' _* ( type ++ ',' )

vstruct
    = '(' ( argument ** ',' ) _* ')'

vtypedef
    = "type" _+ name _* vstruct

error
    = "error" _+ name

method
    = "method" _+ name _* vstruct _* "->" _* vstruct

member
    = _* m:method
    / _* t:vtypedef
    / _* e:error

interface
	= _* "interface" _+ interface_name eol ( member ++ eol ) _*
	