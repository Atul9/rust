/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace -> &'input str
  = #quiet<$([ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}])>
  / #expected("whitespace")

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol_r -> &'input str
  = $( "\n" )
  / $( "\r\n" )
  / $( "\r" )
  / $( "\u{2028}" )
  / $( "\u{2029}" )

comment -> &'input str
    = #quiet< $( "#" [^\n\r\u{2028}\u{2029}]* eol_r ) >
    / #expected("<comment>")

eol -> &'input str
    = #quiet< $( whitespace* eol_r ) >
    / #quiet< $( comment ) >
    / #expected("<newline>")

_ -> &'input str
    = #quiet< $( whitespace / comment / eol_r ) >
    / #expected("<newline> <whitespace> or <comment>")

field_name -> &'input str
    = $( [a-z] ( [_]? [a-z0-9] )* )

name -> &'input str
	= $( [A-Z][A-Za-z0-9_]* )

interface_name -> &'input str /* no hyphen at begin and end */
	= #quiet<$( [a-z]+ ( '.' [a-z0-9]+ ([-] [a-z0-9]+)* )+ )>
	  / #quiet<$( "xn--" [a-z0-9]+ ( '.' [a-z0-9]+ ([-] [a-z0-9]+)* )+ )>
	  / #expected("<reverse domain name>")

array -> ()
    = "[]"

dict -> ()
    = "[string]"

option -> ()
    = "?"

use super::VType;
use super::VTypeExt;

btype -> VTypeExt<'input>
    = "bool"    { VTypeExt::Plain(VType::Bool)}
    / "int"     { VTypeExt::Plain(VType::Int)}
    / "float"   { VTypeExt::Plain(VType::Float)}
    / "string"  { VTypeExt::Plain(VType::String)}
    / "object"  { VTypeExt::Plain(VType::Object)}
    / t:$(name) { VTypeExt::Plain(VType::Typename(t))}
    / v:vstruct { VTypeExt::Plain(VType::Struct(Box::new(v)))}
    / v:venum   { VTypeExt::Plain(VType::Enum(Box::new(v)))}

type -> VTypeExt<'input>
    = v:btype { v }
    / a:array v:type { VTypeExt::Array(Box::new(v)) }
    / a:dict  v:type { VTypeExt::Dict(Box::new(v)) }
    / o:option v:btype { VTypeExt::Option(Box::new(v)) }
    / o:option a:array v:type { VTypeExt::Option(Box::new(VTypeExt::Array(Box::new(v)))) }
    / o:option a:dict v:type { VTypeExt::Option(Box::new(VTypeExt::Dict(Box::new(v)))) }

use super::Argument;
object_field -> Argument<'input>
    = _* n:$(field_name) _* ':' _* v:type { Argument { name : n, vtype : v } }

use super::VStruct;
vstruct -> VStruct<'input>
    = '(' _* e:object_field ** ',' _* ')' { VStruct{ elts: e} }

use super::VEnum;
venum -> VEnum<'input>
    = '(' _* v:field_name ** ( ',' _* ) _*  ')' { VEnum { elts: v } }

use super::Typedef;
use super::VStructOrEnum;
vtypedef -> Typedef<'input>
    = d:$(_*) "type" _+ n:$(name) _* v:vstruct {
        Typedef{name: n, doc: d.trim_matches(&[' ', '\n', '\r'] as &[_]), elt: VStructOrEnum::VStruct(Box::new(v))}
    }
    / d:$(_*) "type" _+ n:$(name) _* v:venum {
        Typedef{name: n, doc: d.trim_matches(&[' ', '\n', '\r'] as &[_]), elt: VStructOrEnum::VEnum(Box::new(v))}
    }

use super::VError;
error -> VError<'input>
    = d:$(_*) "error" _+ n:$(name) _* p:vstruct { VError{name: n, doc: d.trim_matches(&[' ', '\n', '\r'] as &[_]), parm: p} }

use super::Method;
method -> Method<'input>
    = d:$(_*) "method" _+ n:$(name) _* i:vstruct _* "->" _* o:vstruct {
        Method {
            name: n,
            doc: d.trim_matches(&[' ', '\n', '\r'] as &[_]),
            input: i,
            output: o
        }
     }

use super::MethodOrTypedefOrError;
member -> MethodOrTypedefOrError<'input>
    = m:method { MethodOrTypedefOrError::Method(m) }
    / t:vtypedef { MethodOrTypedefOrError::Typedef(t) }
    / e:error { MethodOrTypedefOrError::Error(e) }

use super::Interface;
pub VInterface -> Interface<'input>
	= d:$(_*) "interface" _+ n:$interface_name eol mt:(member++ eol) _*  {
	    Interface::from_token(n, mt, d.trim_matches(&[' ', '\n', '\r'] as &[_]))
	 }
