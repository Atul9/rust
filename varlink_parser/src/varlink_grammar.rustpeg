/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace -> ()
  = #quiet<[ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]> // \v\f removed
  / #expected("whitespace")

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol_r -> ()
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"

comment -> ()
    = #quiet<"#" [^\n\r\u{2028}\u{2029}]* eol_r >
    / #expected("<comment>")

eol -> ()
    = #quiet<whitespace* eol_r>
    / #quiet<comment>
    / #expected("<newline>")

_ -> ()
    = #quiet<whitespace / comment / eol_r>
    / #expected("<newline> <whitespace> or <comment>")

field_name -> &'input str
    = $( [a-z] ( [_]? [a-z0-9] )* )

name -> &'input str
	= $( [A-Z][A-Za-z0-9_]* )

interface_name -> &'input str /* no hyphen at begin and end */
	= #quiet<$( [a-z]+ ( '.' [a-z0-9]+ ([-] [a-z0-9]+)* )+ )>
	  / #quiet<$( "xn--" [a-z0-9]+ ( '.' [a-z0-9]+ ([-] [a-z0-9]+)* )+ )>
	  / #expected("<reverse domain name>")

array -> ()
    = "[]"

use super::VType;
use super::VTypeExt;

type -> VTypeExt<'input>
    = "bool"    a:array? { VTypeExt { vtype: VType::Bool(None), isarray: a.is_some() }}
    / "int"     a:array? { VTypeExt { vtype: VType::Int(None), isarray: a.is_some() }}
    / "float"   a:array? { VTypeExt { vtype: VType::Float(None), isarray: a.is_some() }}
    / "string"  a:array? { VTypeExt { vtype: VType::VString(None),isarray: a.is_some() }}
    / t:$(name) a:array? { VTypeExt { vtype: VType::VTypename(t), isarray: a.is_some() }}
    / v:vstruct a:array? { VTypeExt { vtype: VType::VStruct(Box::new(v)), isarray: a.is_some() }}
    / v:venum a:array? { VTypeExt { vtype: VType::VEnum(Box::new(v)), isarray: a.is_some() }}

use super::Argument;
object_field -> Argument<'input>
    = _* n:$(field_name) _* ':' _* v:type { Argument { name : n, vtype : v } }

use super::VStruct;
vstruct -> VStruct<'input>
    = '(' e:object_field ** ',' _* ')' { VStruct{ elts: e} }

use super::VEnum;
venum -> VEnum<'input>
    = '(' v:field_name ** ( ',' _* ) _*  ')' { VEnum { elts: v } }

use super::Typedef;
use super::VStructOrEnum;
vtypedef -> Typedef<'input>
    = "type" _+ n:$(name) _* v:vstruct { Typedef{name: n, elt: VStructOrEnum::VStruct(Box::new(v))} }
    / "type" _+ n:$(name) _* v:venum { Typedef{name: n, elt: VStructOrEnum::VEnum(Box::new(v))} }

use super::VError;
error -> VError<'input>
    = "error" _+ n:$(name) _* p:vstruct { VError{name: n, parm: p} }

use super::Method;
method -> Method<'input>
    = "method" _+ n:$(name) _* i:vstruct _* "->" _* o:vstruct { Method{name: n, input: i, output: o} }

use super::MethodOrTypedefOrError;
member -> MethodOrTypedefOrError<'input>
    = _* m:method { MethodOrTypedefOrError::Method(m) }
    / _* t:vtypedef { MethodOrTypedefOrError::Typedef(t) }
    / _* e:error { MethodOrTypedefOrError::Error(e) }

use super::Interface;
pub VInterface -> Interface<'input>
	= _* "interface" _+ n:$interface_name eol mt:(member++ eol) _*  { Interface::from_token(n, mt) }