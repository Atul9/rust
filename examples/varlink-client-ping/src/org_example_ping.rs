//! DO NOT EDIT
//! This file is automatically generated by the varlink rust generator

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use serde_json;
use std::io;
use std::sync::{Arc, RwLock};
use varlink;
use varlink::CallTrait;

#[derive(Serialize, Deserialize, Debug, Default)]
pub struct PingReply_ {
    #[serde(skip_serializing_if = "Option::is_none")] pub pong: Option<String>,
}

impl varlink::VarlinkReply for PingReply_ {}

#[derive(Serialize, Deserialize, Debug)]
pub struct PingArgs_ {
    #[serde(skip_serializing_if = "Option::is_none")] pub ping: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Default)]
pub struct PingErrorArgs_ {
    #[serde(skip_serializing_if = "Option::is_none")] pub parameter: Option<String>,
}

pub trait _CallErr: varlink::CallTrait {
    fn reply_ping_error(&mut self, parameter: Option<String>) -> io::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.example.ping.PingError".into(),
            Some(serde_json::to_value(PingErrorArgs_ { parameter }).unwrap()),
        ))
    }
}

impl<'a> _CallErr for varlink::Call<'a> {}

#[derive(Debug)]
pub enum Error_ {
    PingError(PingErrorArgs_),
    VarlinkError_(varlink::Error),
    UnknownError_(varlink::Reply),
    IOError_(io::Error),
    JSONError_(serde_json::Error),
}

impl From<varlink::Reply> for Error_ {
    fn from(e: varlink::Reply) -> Self {
        if varlink::Error::is_error(&e) {
            return Error_::VarlinkError_(e.into());
        }

        match e {
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "org.example.ping.PingError" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => Error_::PingError(v),
                        Err(_) => Error_::PingError(PingErrorArgs_ {
                            ..Default::default()
                        }),
                    },
                    _ => Error_::PingError(PingErrorArgs_ {
                        ..Default::default()
                    }),
                }
            }
            _ => return Error_::UnknownError_(e),
        }
    }
}

impl From<io::Error> for Error_ {
    fn from(e: io::Error) -> Self {
        Error_::IOError_(e)
    }
}

impl From<serde_json::Error> for Error_ {
    fn from(e: serde_json::Error) -> Self {
        use serde_json::error::Category;
        match e.classify() {
            Category::Io => Error_::IOError_(e.into()),
            _ => Error_::JSONError_(e),
        }
    }
}

impl From<Error_> for io::Error {
    fn from(e: Error_) -> Self {
        match e {
            Error_::PingError(e) => io::Error::new(
                io::ErrorKind::Other,
                format!(
                    "org.example.ping.PingError: '{}'",
                    serde_json::to_string_pretty(&e).unwrap()
                ),
            ),
            Error_::VarlinkError_(e) => e.into(),
            Error_::IOError_(e) => e,
            Error_::JSONError_(e) => e.into(),
            Error_::UnknownError_(e) => io::Error::new(
                io::ErrorKind::Other,
                format!(
                    "unknown varlink error: {}",
                    serde_json::to_string_pretty(&e).unwrap()
                ),
            ),
        }
    }
}
pub trait _CallPing: _CallErr {
    fn reply(&mut self, pong: Option<String>) -> io::Result<()> {
        self.reply_struct(PingReply_ { pong }.into())
    }
}

impl<'a> _CallPing for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn ping(&self, call: &mut _CallPing, ping: Option<String>) -> io::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> io::Result<()> {
        Ok(())
    }
}

pub trait VarlinkClientInterface {
    fn ping(
        &mut self,
        ping: Option<String>,
    ) -> io::Result<varlink::MethodCall<PingArgs_, PingReply_, Error_>>;
}

pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
    more: bool,
}

impl VarlinkClient {
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient {
            connection,
            more: false,
        }
    }
    pub fn more(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: true,
        }
    }
}

impl VarlinkClientInterface for VarlinkClient {
    fn ping(
        &mut self,
        ping: Option<String>,
    ) -> io::Result<varlink::MethodCall<PingArgs_, PingReply_, Error_>> {
        varlink::MethodCall::<PingArgs_, PingReply_, Error_>::call(
            self.connection.clone(),
            "org.example.ping.Ping".into(),
            PingArgs_ { ping },
            self.more,
        )
    }
}

pub struct _InterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> _InterfaceProxy {
    _InterfaceProxy { inner }
}

impl varlink::Interface for _InterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#"# Example service
interface org.example.ping

# Returns the same string
method Ping(ping: string) -> (pong: string)

error PingError(parameter: string)"#
    }

    fn get_name(&self) -> &'static str {
        "org.example.ping"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> io::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> io::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "org.example.ping.Ping" => {
                if let Some(args) = req.parameters.clone() {
                    let args: PingArgs_ = serde_json::from_value(args)?;
                    return self.inner.ping(call as &mut _CallPing, args.ping);
                } else {
                    return call.reply_invalid_parameter(None);
                }
            }

            m => {
                return call.reply_method_not_found(Some(String::from(m)));
            }
        }
    }
}
