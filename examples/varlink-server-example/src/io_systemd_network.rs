// DO NOT EDIT
// This file is automatically generated by the varlink rust generator
use std::io;

use varlink;
use serde_json;
use varlink::CallTrait;

#[derive(Serialize, Deserialize, Debug, Default)]
pub struct Netdev {
    pub ifindex: Option<i64>,
    pub ifname: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Default)]
pub struct NetdevInfo {
    pub ifindex: Option<i64>,
    pub ifname: Option<String>,
}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct _InfoReply {
    info: Option<NetdevInfo>,
}
impl varlink::VarlinkReply for _InfoReply {}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct _InfoArgs {
    ifindex: Option<i64>,
}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct _ListReply {
    netdevs: Option<Vec<Netdev>>,
}
impl varlink::VarlinkReply for _ListReply {}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct _UnknownErrorArgs {
    text: Option<String>,
}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct _UnknownNetworkIfIndexArgs {
    ifindex: Option<i64>,
}

pub trait _CallErr: varlink::CallTrait {
    fn reply_unknown_error(&mut self, text: Option<String>) -> io::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "io.systemd.network.UnknownError".into(),
            Some(serde_json::to_value(_UnknownErrorArgs { text }).unwrap()),
        ))
    }
    fn reply_unknown_network_if_index(&mut self, ifindex: Option<i64>) -> io::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "io.systemd.network.UnknownNetworkIfIndex".into(),
            Some(serde_json::to_value(_UnknownNetworkIfIndexArgs { ifindex }).unwrap()),
        ))
    }
}
impl<'a> _CallErr for varlink::Call<'a> {}

pub trait _CallInfo: _CallErr {
    fn reply(&mut self, info: Option<NetdevInfo>) -> io::Result<()> {
        self.reply_struct(_InfoReply { info }.into())
    }
}
impl<'a> _CallInfo for varlink::Call<'a> {}

pub trait _CallList: _CallErr {
    fn reply(&mut self, netdevs: Option<Vec<Netdev>>) -> io::Result<()> {
        self.reply_struct(_ListReply { netdevs }.into())
    }
}
impl<'a> _CallList for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn info(&self, call: &mut _CallInfo, ifindex: Option<i64>) -> io::Result<()>;
    fn list(&self, call: &mut _CallList) -> io::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> io::Result<()> {
        Ok(())
    }
}

pub struct _InterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> _InterfaceProxy {
    _InterfaceProxy { inner }
}

impl varlink::Interface for _InterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#"
# Provides information about network state
interface io.systemd.network

type NetdevInfo (
  ifindex: int,
  ifname: string
)

type Netdev (
  ifindex: int,
  ifname: string
)

# Returns information about a network device
method Info(ifindex: int) -> (info: NetdevInfo)

# Lists all network devices
method List() -> (netdevs: Netdev[])

error UnknownNetworkIfIndex (ifindex: int)
error UnknownError (text: string)
"#
    }

    fn get_name(&self) -> &'static str {
        "io.systemd.network"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> io::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> io::Result<()> {
        let req = call.request.unwrap();
        let method = req.method.clone();
        match method.as_ref() {
            "io.systemd.network.Info" => {
                if let Some(args) = req.parameters.clone() {
                    let args: _InfoArgs = serde_json::from_value(args)?;
                    return self.inner.info(call as &mut _CallInfo, args.ifindex);
                } else {
                    return call.reply_invalid_parameter(None);
                }
            }
            "io.systemd.network.List" => {
                return self.inner.list(call as &mut _CallList);
            }

            m => {
                let method: String = m.clone().into();
                return call.reply_method_not_found(Some(method));
            }
        }
    }
}
