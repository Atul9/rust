// This file is automatically generated by the varlink rust generator
use std::result::Result;
use std::convert::From;

use varlink;
use serde_json;

#[derive(Serialize, Deserialize, Debug)]
pub struct Netdev {
    pub ifindex: Option<i64>,
    pub ifname: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct NetdevInfo {
    pub ifindex: Option<i64>,
    pub ifname: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct InfoReply {
    pub info: Option<NetdevInfo>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct InfoArgs {
    pub ifindex: Option<i64>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct ListReply {
    pub netdevs: Option<Vec<Netdev>>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct UnknownErrorArgs {
    pub text: Option<String>,
}

#[derive(Debug)]
pub enum Error {
    UnknownError(Option<UnknownErrorArgs>),
    UnknownNetworkDevice,
}

impl From<Error> for varlink::server::Error {
    fn from(e: Error) -> Self {
        varlink::server::Error {
            error: match e {
                Error::UnknownError(_) => "io.systemd.network.UnknownError".into(),
                Error::UnknownNetworkDevice => "io.systemd.network.UnknownNetworkDevice".into(),
            },
            parameters: match e {
                Error::UnknownError(args) => Some(serde_json::to_value(args).unwrap()),
                Error::UnknownNetworkDevice => None,
            },
        }
    }
}

pub trait Interface {
    fn info(&self, ifindex: Option<i64>) -> Result<InfoReply, Error>;
    fn list(&self) -> Result<ListReply, Error>;
}

pub struct InterfaceImpl {
    inner: Box<Interface>,
}

pub fn new(inner: Box<Interface>) -> Box<InterfaceImpl> {
    Box::new(InterfaceImpl { inner })
}

impl varlink::server::Interface for InterfaceImpl {
    fn get_description(&self) -> &'static str {
        r#"
# Provides information about network state
interface io.systemd.network

type NetdevInfo (
  ifindex: int,
  ifname: string
)

type Netdev (
  ifindex: int,
  ifname: string
)

# Returns information about a network device
method Info(ifindex: int) -> (info: NetdevInfo)

# Lists all network devices
method List() -> (netdevs: Netdev[])

error UnknownNetworkDevice ()
error UnknownError (text: string)
"#
    }

    fn get_name(&self) -> &'static str {
        "io.systemd.network"
    }

    fn call(
        &self,
        req: varlink::server::Request,
    ) -> Result<serde_json::Value, varlink::server::Error> {
        match req.method.as_ref() {
            "io.systemd.network.Info" => {
                if let Some(args) = req.parameters {
                    let args: InfoArgs = serde_json::from_value(args)?;
                    return Ok(serde_json::to_value(self.inner.info(args.ifindex)?)?);
                } else {
                    return Err(varlink::server::VarlinkError::InvalidParameter(None).into());
                }
            }
            "io.systemd.network.List" => {
                return Ok(serde_json::to_value(self.inner.list()?)?);
            }
            m => {
                let method: String = m.clone().into();
                return Err(
                    varlink::server::VarlinkError::MethodNotFound(Some(method.into())).into(),
                );
            }
        }
    }
}
