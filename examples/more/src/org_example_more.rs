//! DO NOT EDIT
//! This file is automatically generated by the varlink rust generator

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]

use serde_json::{self, Value};
use std::io;
use std::sync::{Arc, RwLock};
use varlink;
use varlink::CallTrait;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct State {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub progress: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct PingReply_ {
    pub pong: String,
}

impl varlink::VarlinkReply for PingReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct PingArgs_ {
    pub ping: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct StopServingReply_ {}

impl varlink::VarlinkReply for StopServingReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct StopServingArgs_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct TestMoreReply_ {
    pub state: State,
}

impl varlink::VarlinkReply for TestMoreReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct TestMoreArgs_ {
    pub n: i64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct TestMoreErrorArgs_ {
    pub reason: String,
}

pub trait VarlinkCallError: varlink::CallTrait {
    fn reply_test_more_error(&mut self, reason: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.example.more.TestMoreError",
            Some(serde_json::to_value(TestMoreErrorArgs_ { reason })?),
        ))
    }
}

impl<'a> VarlinkCallError for varlink::Call<'a> {}

#[derive(Debug)]
pub enum Error {
    TestMoreError(Option<TestMoreErrorArgs_>),
    VarlinkError(varlink::Error),
    UnknownError_(varlink::Reply),
    IOError_(io::Error),
    JSONError_(serde_json::Error),
}

pub type Result<T> = ::std::result::Result<T, Error>;

impl ::std::fmt::Display for Error {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::VarlinkError(e) => e.fmt(fmt),
            Error::JSONError_(e) => e.fmt(fmt),
            Error::IOError_(e) => e.fmt(fmt),
            Error::UnknownError_(varlink::Reply {
                parameters: Some(p),
                ..
            }) => p.fmt(fmt),
            e => write!(fmt, "{:?}", e),
        }
    }
}

impl From<varlink::Reply> for Error {
    fn from(e: varlink::Reply) -> Self {
        if varlink::Error::is_error(&e) {
            return Error::VarlinkError(e.into());
        }

        match e {
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "org.example.more.TestMoreError" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => Error::TestMoreError(v),
                        Err(_) => Error::TestMoreError(None),
                    },
                    _ => Error::TestMoreError(None),
                }
            }
            _ => return Error::UnknownError_(e),
        }
    }
}

impl From<io::Error> for Error {
    fn from(e: io::Error) -> Self {
        Error::IOError_(e)
    }
}

impl From<varlink::Error> for Error {
    fn from(e: varlink::Error) -> Self {
        Error::VarlinkError(e)
    }
}

impl From<serde_json::Error> for Error {
    fn from(e: serde_json::Error) -> Self {
        use serde_json::error::Category;
        match e.classify() {
            Category::Io => Error::IOError_(e.into()),
            _ => Error::JSONError_(e),
        }
    }
}
pub trait CallPing_: VarlinkCallError {
    fn reply(&mut self, pong: String) -> varlink::Result<()> {
        self.reply_struct(PingReply_ { pong }.into())
    }
}

impl<'a> CallPing_ for varlink::Call<'a> {}

pub trait CallStopServing_: VarlinkCallError {
    fn reply(&mut self) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::parameters(None))
    }
}

impl<'a> CallStopServing_ for varlink::Call<'a> {}

pub trait CallTestMore_: VarlinkCallError {
    fn reply(&mut self, state: State) -> varlink::Result<()> {
        self.reply_struct(TestMoreReply_ { state }.into())
    }
}

impl<'a> CallTestMore_ for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn ping(&self, call: &mut CallPing_, ping: String) -> varlink::Result<()>;
    fn stop_serving(&self, call: &mut CallStopServing_) -> varlink::Result<()>;
    fn test_more(&self, call: &mut CallTestMore_, n: i64) -> varlink::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> varlink::Result<()> {
        Ok(())
    }
}

pub trait VarlinkClientInterface {
    fn ping(&mut self, ping: String) -> varlink::MethodCall<PingArgs_, PingReply_, Error>;
    fn stop_serving(&mut self) -> varlink::MethodCall<StopServingArgs_, StopServingReply_, Error>;
    fn test_more(&mut self, n: i64) -> varlink::MethodCall<TestMoreArgs_, TestMoreReply_, Error>;
}

pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
    more: bool,
    oneway: bool,
}

impl VarlinkClient {
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient {
            connection,
            more: false,
            oneway: false,
        }
    }
    pub fn more(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: true,
            oneway: false,
        }
    }
    pub fn oneway(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: false,
            oneway: true,
        }
    }
}

impl VarlinkClientInterface for VarlinkClient {
    fn ping(&mut self, ping: String) -> varlink::MethodCall<PingArgs_, PingReply_, Error> {
        varlink::MethodCall::<PingArgs_, PingReply_, Error>::new(
            self.connection.clone(),
            "org.example.more.Ping",
            PingArgs_ { ping },
        )
    }
    fn stop_serving(&mut self) -> varlink::MethodCall<StopServingArgs_, StopServingReply_, Error> {
        varlink::MethodCall::<StopServingArgs_, StopServingReply_, Error>::new(
            self.connection.clone(),
            "org.example.more.StopServing",
            StopServingArgs_ {},
        )
    }
    fn test_more(&mut self, n: i64) -> varlink::MethodCall<TestMoreArgs_, TestMoreReply_, Error> {
        varlink::MethodCall::<TestMoreArgs_, TestMoreReply_, Error>::new(
            self.connection.clone(),
            "org.example.more.TestMore",
            TestMoreArgs_ { n },
        )
    }
}

pub struct VarlinkInterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> VarlinkInterfaceProxy {
    VarlinkInterfaceProxy { inner }
}

impl varlink::Interface for VarlinkInterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#####################################"# Example Varlink service
interface org.example.more

# Enum, returning either start, progress or end
# progress: [0-100]
type State (
  start: ?bool,
  progress: ?int,
  end: ?bool
)

# Returns the same string
method Ping(ping: string) -> (pong: string)

# Dummy progress method
# n: number of progress steps
method TestMore(n: int) -> (state: State)

# Stop serving
method StopServing() -> ()

# Something failed in TestMore
error TestMoreError (reason: string)
"#####################################
    }

    fn get_name(&self) -> &'static str {
        "org.example.more"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "org.example.more.Ping" => {
                if let Some(args) = req.parameters.clone() {
                    let args: PingArgs_ = serde_json::from_value(args)?;
                    return self.inner.ping(call as &mut CallPing_, args.ping);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.example.more.StopServing" => {
                return self.inner.stop_serving(call as &mut CallStopServing_);
            }
            "org.example.more.TestMore" => {
                if let Some(args) = req.parameters.clone() {
                    let args: TestMoreArgs_ = serde_json::from_value(args)?;
                    return self.inner.test_more(call as &mut CallTestMore_, args.n);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }

            m => {
                return call.reply_method_not_found(String::from(m));
            }
        }
    }
}
