//! DO NOT EDIT
//! This file is automatically generated by the varlink rust generator

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]

use error_chain::ChainedError;
use serde_json::{self, Value};
use std::io;
use std::sync::{Arc, RwLock};
use varlink;
use varlink::CallTrait;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct State {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub progress: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct PingReply_ {
    pub pong: String,
}

impl varlink::VarlinkReply for PingReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct PingArgs_ {
    pub ping: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct StopServingReply_ {}

impl varlink::VarlinkReply for StopServingReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct StopServingArgs_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct TestMoreReply_ {
    pub state: State,
}

impl varlink::VarlinkReply for TestMoreReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct TestMoreArgs_ {
    pub n: i64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct TestMoreErrorArgs_ {
    pub reason: String,
}

pub trait _CallErr: varlink::CallTrait {
    fn reply_test_more_error(&mut self, reason: String) -> Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.example.more.TestMoreError".into(),
            Some(serde_json::to_value(TestMoreErrorArgs_ { reason }).unwrap()),
        )).map_err(|e| e.into())
    }
}

impl<'a> _CallErr for varlink::Call<'a> {}

error_chain! {
    errors {
        TestMoreError(t: Option<TestMoreErrorArgs_>) {
            display("TestMoreError: '{:?}'", t)
        }
    }
    foreign_links {
        Io(::std::io::Error);
        Fmt(::std::fmt::Error);
        SerdeJson(::serde_json::Error);
        }
    links {
        Varlink(::varlink::Error, ::varlink::ErrorKind);
    }
}

impl From<varlink::Reply> for Error {
    fn from(e: varlink::Reply) -> Self {
        if varlink::Error::is_error(&e) {
            return varlink::Error::from(e).into();
        }

        match e {
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "org.example.more.TestMoreError" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => ErrorKind::TestMoreError(v).into(),
                        Err(_) => ErrorKind::TestMoreError(None).into(),
                    },
                    _ => ErrorKind::TestMoreError(None).into(),
                }
            }
            _ => return varlink::Error::from(varlink::ErrorKind::UnknownError(e)).into(),
        }
    }
}

#[derive(Serialize)]
struct internal_error {
    message: String,
}

impl From<Error> for varlink::Error {
    fn from(e: Error) -> Self {
        match e {
            Error(ErrorKind::TestMoreError(t), _) => {
                varlink::Error::from(varlink::ErrorKind::UnknownError(varlink::Reply {
                    error: Some("org.example.more.TestMoreError".into()),
                    parameters: Some(serde_json::to_value(t).unwrap()),
                    ..Default::default()
                }))
            }
            e => varlink::Error::from(varlink::ErrorKind::UnknownError(varlink::Reply {
                error: Some("org.example.more.InternalError".into()),
                parameters: Some(
                    serde_json::to_value(internal_error {
                        message: e.display_chain().to_string(),
                    }).unwrap(),
                ),
                ..Default::default()
            })),
        }
    }
}
pub trait _CallPing: _CallErr {
    fn reply(&mut self, pong: String) -> Result<()> {
        self.reply_struct(PingReply_ { pong }.into())
            .map_err(|e| e.into())
    }
}

impl<'a> _CallPing for varlink::Call<'a> {}

pub trait _CallStopServing: _CallErr {
    fn reply(&mut self) -> Result<()> {
        self.reply_struct(varlink::Reply::parameters(None))
            .map_err(|e| e.into())
    }
}

impl<'a> _CallStopServing for varlink::Call<'a> {}

pub trait _CallTestMore: _CallErr {
    fn reply(&mut self, state: State) -> Result<()> {
        self.reply_struct(TestMoreReply_ { state }.into())
            .map_err(|e| e.into())
    }
}

impl<'a> _CallTestMore for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn ping(&self, call: &mut _CallPing, ping: String) -> Result<()>;
    fn stop_serving(&self, call: &mut _CallStopServing) -> Result<()>;
    fn test_more(&self, call: &mut _CallTestMore, n: i64) -> Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> varlink::Result<()> {
        Ok(())
    }
}

pub trait VarlinkClientInterface {
    fn ping(&mut self, ping: String) -> varlink::MethodCall<PingArgs_, PingReply_, Error>;
    fn stop_serving(&mut self) -> varlink::MethodCall<StopServingArgs_, StopServingReply_, Error>;
    fn test_more(&mut self, n: i64) -> varlink::MethodCall<TestMoreArgs_, TestMoreReply_, Error>;
}

pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
    more: bool,
    oneway: bool,
}

impl VarlinkClient {
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient {
            connection,
            more: false,
            oneway: false,
        }
    }
    pub fn more(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: true,
            oneway: false,
        }
    }
    pub fn oneway(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: false,
            oneway: true,
        }
    }
}

impl VarlinkClientInterface for VarlinkClient {
    fn ping(&mut self, ping: String) -> varlink::MethodCall<PingArgs_, PingReply_, Error> {
        varlink::MethodCall::<PingArgs_, PingReply_, Error>::new(
            self.connection.clone(),
            "org.example.more.Ping".into(),
            PingArgs_ { ping },
        )
    }
    fn stop_serving(&mut self) -> varlink::MethodCall<StopServingArgs_, StopServingReply_, Error> {
        varlink::MethodCall::<StopServingArgs_, StopServingReply_, Error>::new(
            self.connection.clone(),
            "org.example.more.StopServing".into(),
            StopServingArgs_ {},
        )
    }
    fn test_more(&mut self, n: i64) -> varlink::MethodCall<TestMoreArgs_, TestMoreReply_, Error> {
        varlink::MethodCall::<TestMoreArgs_, TestMoreReply_, Error>::new(
            self.connection.clone(),
            "org.example.more.TestMore".into(),
            TestMoreArgs_ { n },
        )
    }
}

pub struct _InterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> _InterfaceProxy {
    _InterfaceProxy { inner }
}

impl varlink::Interface for _InterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#####################################"# Example Varlink service
interface org.example.more

# Enum, returning either start, progress or end
# progress: [0-100]
type State (
  start: ?bool,
  progress: ?int,
  end: ?bool
)

# Returns the same string
method Ping(ping: string) -> (pong: string)

# Dummy progress method
# n: number of progress steps
method TestMore(n: int) -> (state: State)

# Stop serving
method StopServing() -> ()

# Something failed in TestMore
error TestMoreError (reason: string)
"#####################################
    }

    fn get_name(&self) -> &'static str {
        "org.example.more"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "org.example.more.Ping" => {
                if let Some(args) = req.parameters.clone() {
                    let args: PingArgs_ = serde_json::from_value(args)?;
                    return self.inner
                        .ping(call as &mut _CallPing, args.ping)
                        .map_err(|e| e.into());
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.example.more.StopServing" => {
                return self.inner
                    .stop_serving(call as &mut _CallStopServing)
                    .map_err(|e| e.into());
            }
            "org.example.more.TestMore" => {
                if let Some(args) = req.parameters.clone() {
                    let args: TestMoreArgs_ = serde_json::from_value(args)?;
                    return self.inner
                        .test_more(call as &mut _CallTestMore, args.n)
                        .map_err(|e| e.into());
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }

            m => {
                return call.reply_method_not_found(String::from(m));
            }
        }
    }
}
