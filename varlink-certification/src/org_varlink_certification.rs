//! DO NOT EDIT
//! This file is automatically generated by the varlink rust generator

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]

use serde_json::{self, Value};
use std::io;
use std::sync::{Arc, RwLock};
use varlink;
use varlink::CallTrait;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Interface {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub foo: Option<Vec<Option<varlink::StringHashMap<Interface_foo>>>>,
    pub anon: Interface_anon,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct MyType {
    pub object: Value,
    #[serde(rename = "enum")]
    pub enum_: MyType_enum,
    #[serde(rename = "struct")]
    pub struct_: MyType_struct,
    pub array: Vec<String>,
    pub dictionary: varlink::StringHashMap<String>,
    pub stringset: varlink::StringHashSet,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nullable: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nullable_array_struct: Option<Vec<MyType_nullable_array_struct>>,
    pub interface: Interface,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct EndReply_ {
    pub all_ok: bool,
}

impl varlink::VarlinkReply for EndReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct EndArgs_ {
    pub client_id: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct StartReply_ {
    pub client_id: String,
}

impl varlink::VarlinkReply for StartReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct StartArgs_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test01Reply_ {
    pub bool: bool,
}

impl varlink::VarlinkReply for Test01Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test01Args_ {
    pub client_id: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test02Reply_ {
    pub int: i64,
}

impl varlink::VarlinkReply for Test02Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test02Args_ {
    pub client_id: String,
    pub bool: bool,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test03Reply_ {
    pub float: f64,
}

impl varlink::VarlinkReply for Test03Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test03Args_ {
    pub client_id: String,
    pub int: i64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test04Reply_ {
    pub string: String,
}

impl varlink::VarlinkReply for Test04Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test04Args_ {
    pub client_id: String,
    pub float: f64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test05Reply_ {
    pub bool: bool,
    pub int: i64,
    pub float: f64,
    pub string: String,
}

impl varlink::VarlinkReply for Test05Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test05Args_ {
    pub client_id: String,
    pub string: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test06Reply_ {
    #[serde(rename = "struct")]
    pub struct_: Test06Reply_struct,
}

impl varlink::VarlinkReply for Test06Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test06Args_ {
    pub client_id: String,
    pub bool: bool,
    pub int: i64,
    pub float: f64,
    pub string: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test07Reply_ {
    pub map: varlink::StringHashMap<String>,
}

impl varlink::VarlinkReply for Test07Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test07Args_ {
    pub client_id: String,
    #[serde(rename = "struct")]
    pub struct_: Test07Args_struct,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test08Reply_ {
    pub set: varlink::StringHashSet,
}

impl varlink::VarlinkReply for Test08Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test08Args_ {
    pub client_id: String,
    pub map: varlink::StringHashMap<String>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test09Reply_ {
    pub mytype: MyType,
}

impl varlink::VarlinkReply for Test09Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test09Args_ {
    pub client_id: String,
    pub set: varlink::StringHashSet,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test10Reply_ {
    pub string: String,
}

impl varlink::VarlinkReply for Test10Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test10Args_ {
    pub client_id: String,
    pub mytype: MyType,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test11Reply_ {}

impl varlink::VarlinkReply for Test11Reply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test11Args_ {
    pub client_id: String,
    pub last_more_replies: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct CertificationErrorArgs_ {
    pub wants: Value,
    pub got: Value,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct ClientIdErrorArgs_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Interface_anon {
    pub foo: bool,
    pub bar: bool,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct MyType_struct {
    pub first: i64,
    pub second: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct MyType_nullable_array_struct {
    pub first: i64,
    pub second: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test06Reply_struct {
    pub bool: bool,
    pub int: i64,
    pub float: f64,
    pub string: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Test07Args_struct {
    pub bool: bool,
    pub int: i64,
    pub float: f64,
    pub string: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub enum Interface_foo {
    foo,
    bar,
    baz,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub enum MyType_enum {
    one,
    two,
    three,
}

pub trait CallErr_: varlink::CallTrait {
    fn reply_certification_error(&mut self, wants: Value, got: Value) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.varlink.certification.CertificationError",
            Some(serde_json::to_value(CertificationErrorArgs_ {
                wants,
                got,
            })?),
        ))
    }
    fn reply_client_id_error(&mut self) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.varlink.certification.ClientIdError",
            None,
        ))
    }
}

impl<'a> CallErr_ for varlink::Call<'a> {}

#[derive(Debug)]
pub enum Error {
    CertificationError(Option<CertificationErrorArgs_>),
    ClientIdError(Option<ClientIdErrorArgs_>),
    VarlinkError(varlink::Error),
    UnknownError_(varlink::Reply),
    IOError_(io::Error),
    JSONError_(serde_json::Error),
}

impl From<varlink::Reply> for Error {
    fn from(e: varlink::Reply) -> Self {
        if varlink::Error::is_error(&e) {
            return Error::VarlinkError(e.into());
        }

        match e {
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "org.varlink.certification.CertificationError" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => Error::CertificationError(v),
                        Err(_) => Error::CertificationError(None),
                    },
                    _ => Error::CertificationError(None),
                }
            }
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "org.varlink.certification.ClientIdError" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => Error::ClientIdError(v),
                        Err(_) => Error::ClientIdError(None),
                    },
                    _ => Error::ClientIdError(None),
                }
            }
            _ => return Error::UnknownError_(e),
        }
    }
}

#[derive(Serialize)]
struct internal_error {
    message: String,
}

pub type Result<T> = ::std::result::Result<T, Error>;

impl ::std::fmt::Display for Error {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::VarlinkError(e) => e.fmt(fmt),
            Error::JSONError_(e) => e.fmt(fmt),
            Error::IOError_(e) => e.fmt(fmt),
            Error::UnknownError_(t) => varlink::Error::from(t.clone()).fmt(fmt),
            e => write!(fmt, "{:?}", e),
        }
    }
}

impl From<io::Error> for Error {
    fn from(e: io::Error) -> Self {
        Error::IOError_(e)
    }
}

impl From<varlink::Error> for Error {
    fn from(e: varlink::Error) -> Self {
        Error::VarlinkError(e)
    }
}

impl From<serde_json::Error> for Error {
    fn from(e: serde_json::Error) -> Self {
        use serde_json::error::Category;
        match e.classify() {
            Category::Io => Error::IOError_(e.into()),
            _ => Error::JSONError_(e),
        }
    }
}

impl From<Error> for varlink::Error {
    fn from(e: Error) -> Self {
        match e {
            Error::CertificationError(t) => {
                varlink::Error::from(varlink::ErrorKind::UnknownError(varlink::Reply {
                    error: Some("org.varlink.certification.CertificationError".into()),
                    parameters: serde_json::to_value(t).ok(),
                    ..Default::default()
                }))
            }
            Error::ClientIdError(t) => {
                varlink::Error::from(varlink::ErrorKind::UnknownError(varlink::Reply {
                    error: Some("org.varlink.certification.ClientIdError".into()),
                    parameters: serde_json::to_value(t).ok(),
                    ..Default::default()
                }))
            }
            Error::VarlinkError(e) => e,
            Error::JSONError_(t) => varlink::Error::from(t),
            Error::IOError_(t) => varlink::Error::from(t),
            Error::UnknownError_(t) => varlink::Error::from(t),
        }
    }
}
pub trait CallEnd_: CallErr_ {
    fn reply(&mut self, all_ok: bool) -> varlink::Result<()> {
        self.reply_struct(EndReply_ { all_ok }.into())
    }
}

impl<'a> CallEnd_ for varlink::Call<'a> {}

pub trait CallStart_: CallErr_ {
    fn reply(&mut self, client_id: String) -> varlink::Result<()> {
        self.reply_struct(StartReply_ { client_id }.into())
    }
}

impl<'a> CallStart_ for varlink::Call<'a> {}

pub trait CallTest01_: CallErr_ {
    fn reply(&mut self, bool: bool) -> varlink::Result<()> {
        self.reply_struct(Test01Reply_ { bool }.into())
    }
}

impl<'a> CallTest01_ for varlink::Call<'a> {}

pub trait CallTest02_: CallErr_ {
    fn reply(&mut self, int: i64) -> varlink::Result<()> {
        self.reply_struct(Test02Reply_ { int }.into())
    }
}

impl<'a> CallTest02_ for varlink::Call<'a> {}

pub trait CallTest03_: CallErr_ {
    fn reply(&mut self, float: f64) -> varlink::Result<()> {
        self.reply_struct(Test03Reply_ { float }.into())
    }
}

impl<'a> CallTest03_ for varlink::Call<'a> {}

pub trait CallTest04_: CallErr_ {
    fn reply(&mut self, string: String) -> varlink::Result<()> {
        self.reply_struct(Test04Reply_ { string }.into())
    }
}

impl<'a> CallTest04_ for varlink::Call<'a> {}

pub trait CallTest05_: CallErr_ {
    fn reply(&mut self, bool: bool, int: i64, float: f64, string: String) -> varlink::Result<()> {
        self.reply_struct(
            Test05Reply_ {
                bool,
                int,
                float,
                string,
            }.into(),
        )
    }
}

impl<'a> CallTest05_ for varlink::Call<'a> {}

pub trait CallTest06_: CallErr_ {
    fn reply(&mut self, struct_: Test06Reply_struct) -> varlink::Result<()> {
        self.reply_struct(Test06Reply_ { struct_ }.into())
    }
}

impl<'a> CallTest06_ for varlink::Call<'a> {}

pub trait CallTest07_: CallErr_ {
    fn reply(&mut self, map: varlink::StringHashMap<String>) -> varlink::Result<()> {
        self.reply_struct(Test07Reply_ { map }.into())
    }
}

impl<'a> CallTest07_ for varlink::Call<'a> {}

pub trait CallTest08_: CallErr_ {
    fn reply(&mut self, set: varlink::StringHashSet) -> varlink::Result<()> {
        self.reply_struct(Test08Reply_ { set }.into())
    }
}

impl<'a> CallTest08_ for varlink::Call<'a> {}

pub trait CallTest09_: CallErr_ {
    fn reply(&mut self, mytype: MyType) -> varlink::Result<()> {
        self.reply_struct(Test09Reply_ { mytype }.into())
    }
}

impl<'a> CallTest09_ for varlink::Call<'a> {}

pub trait CallTest10_: CallErr_ {
    fn reply(&mut self, string: String) -> varlink::Result<()> {
        self.reply_struct(Test10Reply_ { string }.into())
    }
}

impl<'a> CallTest10_ for varlink::Call<'a> {}

pub trait CallTest11_: CallErr_ {
    fn reply(&mut self) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::parameters(None))
    }
}

impl<'a> CallTest11_ for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn end(&self, call: &mut CallEnd_, client_id: String) -> varlink::Result<()>;
    fn start(&self, call: &mut CallStart_) -> varlink::Result<()>;
    fn test01(&self, call: &mut CallTest01_, client_id: String) -> varlink::Result<()>;
    fn test02(&self, call: &mut CallTest02_, client_id: String, bool: bool) -> varlink::Result<()>;
    fn test03(&self, call: &mut CallTest03_, client_id: String, int: i64) -> varlink::Result<()>;
    fn test04(&self, call: &mut CallTest04_, client_id: String, float: f64) -> varlink::Result<()>;
    fn test05(
        &self,
        call: &mut CallTest05_,
        client_id: String,
        string: String,
    ) -> varlink::Result<()>;
    fn test06(
        &self,
        call: &mut CallTest06_,
        client_id: String,
        bool: bool,
        int: i64,
        float: f64,
        string: String,
    ) -> varlink::Result<()>;
    fn test07(
        &self,
        call: &mut CallTest07_,
        client_id: String,
        struct_: Test07Args_struct,
    ) -> varlink::Result<()>;
    fn test08(
        &self,
        call: &mut CallTest08_,
        client_id: String,
        map: varlink::StringHashMap<String>,
    ) -> varlink::Result<()>;
    fn test09(
        &self,
        call: &mut CallTest09_,
        client_id: String,
        set: varlink::StringHashSet,
    ) -> varlink::Result<()>;
    fn test10(
        &self,
        call: &mut CallTest10_,
        client_id: String,
        mytype: MyType,
    ) -> varlink::Result<()>;
    fn test11(
        &self,
        call: &mut CallTest11_,
        client_id: String,
        last_more_replies: Vec<String>,
    ) -> varlink::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> varlink::Result<()> {
        Ok(())
    }
}

pub trait VarlinkClientInterface {
    fn end(&mut self, client_id: String) -> varlink::MethodCall<EndArgs_, EndReply_, Error>;
    fn start(&mut self) -> varlink::MethodCall<StartArgs_, StartReply_, Error>;
    fn test01(
        &mut self,
        client_id: String,
    ) -> varlink::MethodCall<Test01Args_, Test01Reply_, Error>;
    fn test02(
        &mut self,
        client_id: String,
        bool: bool,
    ) -> varlink::MethodCall<Test02Args_, Test02Reply_, Error>;
    fn test03(
        &mut self,
        client_id: String,
        int: i64,
    ) -> varlink::MethodCall<Test03Args_, Test03Reply_, Error>;
    fn test04(
        &mut self,
        client_id: String,
        float: f64,
    ) -> varlink::MethodCall<Test04Args_, Test04Reply_, Error>;
    fn test05(
        &mut self,
        client_id: String,
        string: String,
    ) -> varlink::MethodCall<Test05Args_, Test05Reply_, Error>;
    fn test06(
        &mut self,
        client_id: String,
        bool: bool,
        int: i64,
        float: f64,
        string: String,
    ) -> varlink::MethodCall<Test06Args_, Test06Reply_, Error>;
    fn test07(
        &mut self,
        client_id: String,
        struct_: Test07Args_struct,
    ) -> varlink::MethodCall<Test07Args_, Test07Reply_, Error>;
    fn test08(
        &mut self,
        client_id: String,
        map: varlink::StringHashMap<String>,
    ) -> varlink::MethodCall<Test08Args_, Test08Reply_, Error>;
    fn test09(
        &mut self,
        client_id: String,
        set: varlink::StringHashSet,
    ) -> varlink::MethodCall<Test09Args_, Test09Reply_, Error>;
    fn test10(
        &mut self,
        client_id: String,
        mytype: MyType,
    ) -> varlink::MethodCall<Test10Args_, Test10Reply_, Error>;
    fn test11(
        &mut self,
        client_id: String,
        last_more_replies: Vec<String>,
    ) -> varlink::MethodCall<Test11Args_, Test11Reply_, Error>;
}

pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
    more: bool,
    oneway: bool,
}

impl VarlinkClient {
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient {
            connection,
            more: false,
            oneway: false,
        }
    }
    pub fn more(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: true,
            oneway: false,
        }
    }
    pub fn oneway(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: false,
            oneway: true,
        }
    }
}

impl VarlinkClientInterface for VarlinkClient {
    fn end(&mut self, client_id: String) -> varlink::MethodCall<EndArgs_, EndReply_, Error> {
        varlink::MethodCall::<EndArgs_, EndReply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.End",
            EndArgs_ { client_id },
        )
    }
    fn start(&mut self) -> varlink::MethodCall<StartArgs_, StartReply_, Error> {
        varlink::MethodCall::<StartArgs_, StartReply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Start",
            StartArgs_ {},
        )
    }
    fn test01(
        &mut self,
        client_id: String,
    ) -> varlink::MethodCall<Test01Args_, Test01Reply_, Error> {
        varlink::MethodCall::<Test01Args_, Test01Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test01",
            Test01Args_ { client_id },
        )
    }
    fn test02(
        &mut self,
        client_id: String,
        bool: bool,
    ) -> varlink::MethodCall<Test02Args_, Test02Reply_, Error> {
        varlink::MethodCall::<Test02Args_, Test02Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test02",
            Test02Args_ { client_id, bool },
        )
    }
    fn test03(
        &mut self,
        client_id: String,
        int: i64,
    ) -> varlink::MethodCall<Test03Args_, Test03Reply_, Error> {
        varlink::MethodCall::<Test03Args_, Test03Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test03",
            Test03Args_ { client_id, int },
        )
    }
    fn test04(
        &mut self,
        client_id: String,
        float: f64,
    ) -> varlink::MethodCall<Test04Args_, Test04Reply_, Error> {
        varlink::MethodCall::<Test04Args_, Test04Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test04",
            Test04Args_ { client_id, float },
        )
    }
    fn test05(
        &mut self,
        client_id: String,
        string: String,
    ) -> varlink::MethodCall<Test05Args_, Test05Reply_, Error> {
        varlink::MethodCall::<Test05Args_, Test05Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test05",
            Test05Args_ { client_id, string },
        )
    }
    fn test06(
        &mut self,
        client_id: String,
        bool: bool,
        int: i64,
        float: f64,
        string: String,
    ) -> varlink::MethodCall<Test06Args_, Test06Reply_, Error> {
        varlink::MethodCall::<Test06Args_, Test06Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test06",
            Test06Args_ {
                client_id,
                bool,
                int,
                float,
                string,
            },
        )
    }
    fn test07(
        &mut self,
        client_id: String,
        struct_: Test07Args_struct,
    ) -> varlink::MethodCall<Test07Args_, Test07Reply_, Error> {
        varlink::MethodCall::<Test07Args_, Test07Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test07",
            Test07Args_ { client_id, struct_ },
        )
    }
    fn test08(
        &mut self,
        client_id: String,
        map: varlink::StringHashMap<String>,
    ) -> varlink::MethodCall<Test08Args_, Test08Reply_, Error> {
        varlink::MethodCall::<Test08Args_, Test08Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test08",
            Test08Args_ { client_id, map },
        )
    }
    fn test09(
        &mut self,
        client_id: String,
        set: varlink::StringHashSet,
    ) -> varlink::MethodCall<Test09Args_, Test09Reply_, Error> {
        varlink::MethodCall::<Test09Args_, Test09Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test09",
            Test09Args_ { client_id, set },
        )
    }
    fn test10(
        &mut self,
        client_id: String,
        mytype: MyType,
    ) -> varlink::MethodCall<Test10Args_, Test10Reply_, Error> {
        varlink::MethodCall::<Test10Args_, Test10Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test10",
            Test10Args_ { client_id, mytype },
        )
    }
    fn test11(
        &mut self,
        client_id: String,
        last_more_replies: Vec<String>,
    ) -> varlink::MethodCall<Test11Args_, Test11Reply_, Error> {
        varlink::MethodCall::<Test11Args_, Test11Reply_, Error>::new(
            self.connection.clone(),
            "org.varlink.certification.Test11",
            Test11Args_ {
                client_id,
                last_more_replies,
            },
        )
    }
}

pub struct _InterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> _InterfaceProxy {
    _InterfaceProxy { inner }
}

impl varlink::Interface for _InterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#####################################"# Interface to test varlink implementations against.
# First you write a varlink client calling:
# Start, Test01, Test02, …, Test09, End
# The return value of the previous call should be the argument of the next call.
# Then you test this client against well known servers like python or rust from
# https://github.com/varlink/
#
# Next you write a varlink server providing the same service as the well known ones.
# Now run your client against it and run well known clients like python or rust
# from https://github.com/varlink/ against your server. If all works out, then
# your new language bindings should be varlink certified.
interface org.varlink.certification

type Interface (
  foo: ?[]?[string](foo, bar, baz),
  anon: (foo: bool, bar: bool)
)

type MyType (
  object: object,
  enum: (one, two, three),
  struct: (first: int, second: string),
  array: []string,
  dictionary: [string]string,
  stringset: [string](),
  nullable: ?string,
  nullable_array_struct: ?[](first: int, second: string),
  interface: Interface
)

method Start() -> (client_id: string)

method Test01(client_id: string) -> (bool: bool)

method Test02(client_id: string, bool: bool) -> (int: int)

method Test03(client_id: string, int: int) -> (float: float)

method Test04(client_id: string, float: float) -> (string: string)

method Test05(client_id: string, string: string) -> (
  bool: bool,
  int: int,
  float: float,
  string: string
)

method Test06(
  client_id: string,
  bool: bool,
  int: int,
  float: float,
  string: string
) -> (
  struct: (
    bool: bool,
    int: int,
    float: float,
    string: string
  )
)

method Test07(
  client_id: string,
  struct: (
    bool: bool,
    int: int,
    float: float,
    string: string
  )
) -> (map: [string]string)

method Test08(client_id: string, map: [string]string) -> (set: [string]())

method Test09(client_id: string, set: [string]()) -> (mytype: MyType)

# returns more than one reply with "continues"
method Test10(client_id: string, mytype: MyType) -> (string: string)

# must be called as "oneway"
method Test11(client_id: string, last_more_replies: []string) -> ()

method End(client_id: string) -> (all_ok: bool)

error ClientIdError ()
error CertificationError (wants: object, got: object)
"#####################################
    }

    fn get_name(&self) -> &'static str {
        "org.varlink.certification"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "org.varlink.certification.End" => {
                if let Some(args) = req.parameters.clone() {
                    let args: EndArgs_ = serde_json::from_value(args)?;
                    return self.inner.end(call as &mut CallEnd_, args.client_id);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Start" => {
                return self.inner.start(call as &mut CallStart_);
            }
            "org.varlink.certification.Test01" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test01Args_ = serde_json::from_value(args)?;
                    return self.inner.test01(call as &mut CallTest01_, args.client_id);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test02" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test02Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test02(call as &mut CallTest02_, args.client_id, args.bool);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test03" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test03Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test03(call as &mut CallTest03_, args.client_id, args.int);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test04" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test04Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test04(call as &mut CallTest04_, args.client_id, args.float);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test05" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test05Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test05(call as &mut CallTest05_, args.client_id, args.string);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test06" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test06Args_ = serde_json::from_value(args)?;
                    return self.inner.test06(
                        call as &mut CallTest06_,
                        args.client_id,
                        args.bool,
                        args.int,
                        args.float,
                        args.string,
                    );
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test07" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test07Args_ = serde_json::from_value(args)?;
                    return self.inner.test07(
                        call as &mut CallTest07_,
                        args.client_id,
                        args.struct_,
                    );
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test08" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test08Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test08(call as &mut CallTest08_, args.client_id, args.map);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test09" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test09Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test09(call as &mut CallTest09_, args.client_id, args.set);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test10" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test10Args_ = serde_json::from_value(args)?;
                    return self.inner
                        .test10(call as &mut CallTest10_, args.client_id, args.mytype);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "org.varlink.certification.Test11" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Test11Args_ = serde_json::from_value(args)?;
                    return self.inner.test11(
                        call as &mut CallTest11_,
                        args.client_id,
                        args.last_more_replies,
                    );
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }

            m => {
                return call.reply_method_not_found(String::from(m));
            }
        }
    }
}
