//! DO NOT EDIT
//! This file is automatically generated by the varlink rust generator

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]

use failure::{Backtrace, Context, Fail, ResultExt};
use serde_json::{self, Value};
use std::io;
use std::sync::{Arc, RwLock};
use varlink::{self, CallTrait};

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum Enum {
 #[serde(rename = "enum")]   enum_,
   b,
   c,

}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum Interface {
   interface,
   b,
   c,

}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum Type {
 #[serde(rename = "type")]   type_,
   b,
   c,

}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum TypeEnum {
 #[serde(rename = "type")]   type_,
   b,
   c,

}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct TypeFoo {
 pub bool: bool,
 pub int: i64,
 pub float: f64,
 pub string: String,
    #[serde(skip_serializing_if = "Option::is_none")] #[serde(rename = "enum")] pub enum_: Option<varlink::StringHashMap<Option<TypeFoo_enum>>>,
    #[serde(skip_serializing_if = "Option::is_none")] #[serde(rename = "type")] pub type_: Option<TypeEnum>,
 pub anon: TypeFoo_anon,
 pub object: Value,
 pub stringset: varlink::StringHashSet,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct BarReply_ {
}

impl varlink::VarlinkReply for BarReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct BarArgs_ {
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct FooReply_ {
 pub a: Vec<FooReply_a>,
 pub foo: TypeFoo,
 pub interface: Interface,
}

impl varlink::VarlinkReply for FooReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct FooArgs_ {
 #[serde(rename = "enum")] pub enum_: FooArgs_enum,
 pub foo: TypeFoo,
 pub interface: Interface,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct ErrorBarArgs_ {
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct ErrorFooArgs_ {
 #[serde(rename = "enum")] pub enum_: ErrorFooArgs_enum,
 pub foo: TypeFoo,
 pub bar: ErrorFooArgs_bar,
 pub interface: Interface,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct TypeFoo_anon {
 pub foo: bool,
 pub bar: i64,
 pub baz: Vec<TypeFoo_anon_baz>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct FooReply_a {
 pub b: bool,
 pub c: i64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct FooArgs_enum {
 pub b: bool,
 pub c: i64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct ErrorFooArgs_enum {
 pub b: bool,
 pub c: i64,
 pub interface: Interface,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum TypeFoo_enum {
   foo,
   bar,
   baz,

}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum ErrorFooArgs_bar {
 #[serde(rename = "type")]   type_,
 #[serde(rename = "enum")]   enum_,
   int,
   bool,
   string,
 #[serde(rename = "if")]   if_,
 #[serde(rename = "let")]   let_,

}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct TypeFoo_anon_baz {
 pub a: i64,
 pub b: i64,
}

pub trait VarlinkCallError: varlink::CallTrait {
    fn reply_error_bar(&mut self) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.example.complex.ErrorBar",
        None,

        ))
    }
    fn reply_error_foo(&mut self, enum_: ErrorFooArgs_enum, foo: TypeFoo, bar: ErrorFooArgs_bar, interface: Interface) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.example.complex.ErrorFoo",
            Some(serde_json::to_value(ErrorFooArgs_ { enum_, foo, bar, interface })?),
        ))
    }
}

impl<'a> VarlinkCallError for varlink::Call<'a> {}


#[derive(Debug)]
pub struct Error {
    inner: Context<ErrorKind>,
}

#[derive(Clone, PartialEq, Debug, Fail)]
pub enum ErrorKind {
    #[fail(display = "IO error")]
    Io_(::std::io::ErrorKind),
    #[fail(display = "(De)Serialization Error")]
    SerdeJson_(serde_json::error::Category),
    #[fail(display = "Varlink Error")]
    Varlink(varlink::ErrorKind),
    #[fail(display = "Unknown error reply: '{:#?}'", _0)]
    VarlinkReply(varlink::Reply),
    #[fail(display = "org.example.complex.ErrorBar: {:#?}", _0)]
    ErrorBar(Option<ErrorBarArgs_>),
    #[fail(display = "org.example.complex.ErrorFoo: {:#?}", _0)]
    ErrorFoo(Option<ErrorFooArgs_>),
}

impl Fail for Error {
    fn cause(&self) -> Option<&Fail> {
        self.inner.cause()
    }

    fn backtrace(&self) -> Option<&Backtrace> {
        self.inner.backtrace()
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::std::fmt::Display::fmt(&self.inner, f)
    }
}

impl Error {
    pub fn kind(&self) -> ErrorKind {
        self.inner.get_context().clone()
    }
}

impl From<ErrorKind> for Error {
    fn from(kind: ErrorKind) -> Error {
        Error {
            inner: Context::new(kind),
        }
    }
}

impl From<Context<ErrorKind>> for Error {
    fn from(inner: Context<ErrorKind>) -> Error {
        Error { inner }
    }
}

impl From<::std::io::Error> for Error {
    fn from(e: ::std::io::Error) -> Error {
        let kind = e.kind();
        e.context(ErrorKind::Io_(kind)).into()
    }
}

impl From<serde_json::Error> for Error {
    fn from(e: serde_json::Error) -> Error {
        let cat = e.classify();
        e.context(ErrorKind::SerdeJson_(cat)).into()
    }
}

pub type Result<T> = ::std::result::Result<T, Error>;

impl From<varlink::Error> for Error {
    fn from(e: varlink::Error) -> Self {
        let kind = e.kind();
        match kind {
            varlink::ErrorKind::Io(kind) => e.context(ErrorKind::Io_(kind)).into(),
            varlink::ErrorKind::SerdeJsonSer(cat) => e.context(ErrorKind::SerdeJson_(cat)).into(),
            kind => e.context(ErrorKind::Varlink(kind)).into(),
        }
    }
}

impl From<varlink::Reply> for Error {
    fn from(e: varlink::Reply) -> Self {
        if varlink::Error::is_error(&e) {
            return varlink::Error::from(e).into();
        }

        match e {
            varlink::Reply {
                     error: Some(ref t), ..
                } if t == "org.example.complex.ErrorBar" =>
                {
                   match e {
                       varlink::Reply {
                           parameters: Some(p),
                           ..
                       } => match serde_json::from_value(p) {
                           Ok(v) => ErrorKind::ErrorBar(v).into(),
                           Err(_) => ErrorKind::ErrorBar(None).into(),
                       },
                       _ => ErrorKind::ErrorBar(None).into(),
                   }
               }
            varlink::Reply {
                     error: Some(ref t), ..
                } if t == "org.example.complex.ErrorFoo" =>
                {
                   match e {
                       varlink::Reply {
                           parameters: Some(p),
                           ..
                       } => match serde_json::from_value(p) {
                           Ok(v) => ErrorKind::ErrorFoo(v).into(),
                           Err(_) => ErrorKind::ErrorFoo(None).into(),
                       },
                       _ => ErrorKind::ErrorFoo(None).into(),
                   }
               }
            _ => return ErrorKind::VarlinkReply(e).into(),
        }
    }
}
pub trait CallBar_: VarlinkCallError {
    fn reply(&mut self) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::parameters(None))
    }
}

impl<'a> CallBar_ for varlink::Call<'a> {}

pub trait CallFoo_: VarlinkCallError {
    fn reply(&mut self, a: Vec<FooReply_a>, foo: TypeFoo, interface: Interface) -> varlink::Result<()> {
        self.reply_struct(FooReply_ { a, foo, interface }.into())
    }
}

impl<'a> CallFoo_ for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn bar(&self, call: &mut CallBar_) -> varlink::Result<()>;
    fn foo(&self, call: &mut CallFoo_, enum_: FooArgs_enum, foo: TypeFoo, interface: Interface) -> varlink::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> varlink::Result<()> {
        Ok(())
    }
}

pub trait VarlinkClientInterface {
    fn bar(&mut self) -> varlink::MethodCall<BarArgs_, BarReply_, Error>;
    fn foo(&mut self, enum_: FooArgs_enum, foo: TypeFoo, interface: Interface) -> varlink::MethodCall<FooArgs_, FooReply_, Error>;
}

pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
    more: bool,
    oneway: bool,
}

impl VarlinkClient {
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient {
            connection,
            more: false,
            oneway: false,
        }
    }
    pub fn more(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: true,
            oneway: false,
        }
    }
    pub fn oneway(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: false,
            oneway: true,
        }
    }
}

impl VarlinkClientInterface for VarlinkClient {
    fn bar(&mut self) -> varlink::MethodCall<BarArgs_, BarReply_, Error> {
            varlink::MethodCall::<BarArgs_, BarReply_, Error>::new(
            self.connection.clone(),
            "org.example.complex.Bar",
            BarArgs_ {  },
        )
    }
    fn foo(&mut self, enum_: FooArgs_enum, foo: TypeFoo, interface: Interface) -> varlink::MethodCall<FooArgs_, FooReply_, Error> {
            varlink::MethodCall::<FooArgs_, FooReply_, Error>::new(
            self.connection.clone(),
            "org.example.complex.Foo",
            FooArgs_ { enum_, foo, interface },
        )
    }
}

pub struct VarlinkInterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> VarlinkInterfaceProxy {
    VarlinkInterfaceProxy { inner }
}

impl varlink::Interface for VarlinkInterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#####################################"interface org.example.complex

type Enum (enum, b, c)

type Type (type, b, c)

type TypeEnum (type, b, c)

type Interface (interface, b, c)

type TypeFoo (
  bool: bool,
  int: int,
  float: float,
  string: string,
  enum: ?[string]?(foo, bar, baz),
  type: ?TypeEnum,
  anon: (
    foo: bool,
    bar: int,
    baz: [](a: int, b: int)
  ),
  object: object,
  stringset: [string]()
)

method Foo(
  enum: (b: bool, c: int),
  foo: TypeFoo,
  interface: Interface
) -> (
  a: [](b: bool, c: int),
  foo: TypeFoo,
  interface: Interface
)

method Bar() -> ()

error ErrorFoo (
  enum: (
    b: bool,
    c: int,
    interface: Interface
  ),
  foo: TypeFoo,
  bar: (type, enum, int, bool, string, if, let),
  interface: Interface
)

error ErrorBar ()
"#####################################
    }

    fn get_name(&self) -> &'static str {
        "org.example.complex"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "org.example.complex.Bar" => {
                return self.inner.bar(call as &mut CallBar_);
            }
            "org.example.complex.Foo" => {
                if let Some(args) = req.parameters.clone() {
                    let args: FooArgs_ = serde_json::from_value(args)?;
                    return self.inner.foo(call as &mut CallFoo_, args.enum_, args.foo, args.interface);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }

            m => {
                return call.reply_method_not_found(String::from(m));
            }
        }
    }
}